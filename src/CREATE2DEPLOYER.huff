// Optimized Create2Deployer Contract in Huff
// This implementation allows for efficient contract deployment using the CREATE2 opcode.
// The main advantage of this Huff version is the significant reduction in bytecode size and gas consumption.

// initial create2 addr: 0x4e59b44847b379578588920cA78FbF26c0B4956C
// original bytecode:    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3
// Huff bytecode:        0x60158060093d393df33d35602080360380913d373d34f58061001457fe5b
// Huff init code hash:  0xf6acacf0a69d7d28fcbcdc2c4994077181ded71c6332147322811eb66d5ab0e8
// addr generated with create2crunch

#define macro __DISPATCHER(z0) = takes(0) returns(0) {
  <z0> calldataload               // bytes32(salt)
  0x20 calldatasize sub           // bytes32(salt), 0x20, (bytecode size = calldatasize - 0x20)
  dup1                            // bytes32(salt), 0x20, bytecode_size, bytecode_size
  0x20                            // bytes32(salt), bytecode_size, bytecode_size, 0x20
  <z0>                            // bytes32(salt), bytecode_size, bytecode_size, 0x20, 0x00
  calldatacopy                    // bytes32(salt), bytecode_size,

  <z0>                            // bytes32(salt), bytecode_size, 0x00
  callvalue                       // bytes32(salt), bytecode_size, 0x00, callvalue
  create2                         // deployed address
  
  // if deployedAddress != 0x00: goto creationOkJump
  dup1 creationOkJump jumpi       // 0xff...e0 + calldatasize, 0x00, hash, deployedAddress

  // if deployedAddress == 0x00 revert using invalid opcode  
  <z0> revert
  
  creationOkJump:
    // return the deployed address
    <z0> mstore
    0x14 0x0c return
}

#define macro MAIN() = takes(0) returns(0) {
  __DISPATCHER(returndatasize)
}